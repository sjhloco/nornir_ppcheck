{# ################################### IOS/IOS-XE ################################## #}
{% if 'ios' in os_type |string %}
{# ########### IMAGE: show version - {image: code_number} ########## #}
{% if feature == 'image' %}
- show version:
    image: {{ input_vars }}
{# ########### MGMT ACL: show ip access-lists <name> - format [{acl_name: {name: seq_num: {protocol: ip/tcp/udp, src: src_ip, dst: dst_ip, dst_port: port}] ########## #}
{% elif feature == 'acl' %}
{% for each_acl in input_vars %}
- show ip access-lists {{ each_acl.name }}:
    {{ each_acl.name }}:
      _mode: strict
{% set seq = namespace(cnt=10) %}
{% for each_ace in each_acl.ace %}{% if each_ace.keys() | list | first != 'remark' %}
      '{{ seq.cnt }}':
        action: {{ each_ace.keys() | list | first }}
        protocol: ip
        src: {{ each_ace.values() | list | first }}
        dst: any
{% set seq.cnt = seq.cnt + 10 %}
{% endif %}{% endfor %}
{% endfor %}
{# ########### PO: show etherchannel summary - {po_name: {protocol: type, status: code, members: {intf_name: {mbr_status: code}}}} ########## #}
{% elif feature == 'port_channel' %}
- show etherchannel summary:
{% for each_po_name, each_po_info in input_vars.items() %}
    {{ each_po_name }}:
      status: U
      protocol: {{ each_po_info.protocol }}
      members:
        _mode: strict
{% for each_member in each_po_info.members %}
        {{ each_member }}:
          mbr_status: P
{% endfor %}{% endfor %}
{# ########### INTF_BR: show ip interface brief - {intf: {ip:x, status: x}} ########## #}
{% elif feature == 'intf_brief' %}
- show ip interface brief:
{% for each_intf, each_ip in input_vars.items() %}
    {{ each_intf }}:
      ip: {{ each_ip }}
      status: up
{% endfor %}
{# ########### CDP: show cdp neighbors - {intf: {neighbor: neighbor_interface}} ########## #}
{% elif feature == 'cdp_nbr' %}
- show cdp neighbors:
{% for each_intf, each_nbr in input_vars.items() %}
    {{ each_intf }}:
      {{ each_nbr.nbr_name }}: {{ each_nbr.nbr_intf }}
{% endfor %}
{# ########### LLDP: show lldp neighbors - {intf: {neighbor: neighbor_interface}} ########## #}
{% elif feature == 'lldp_nbr' %}
- show lldp neighbors:
{% for each_intf, each_nbr in input_vars.items() %}
    {{ each_intf }}:
      {{ each_nbr.nbr_name }}: {{ each_nbr.nbr_intf }}
{% endfor %}
{# ########### HSRP: show standby brief - {group: {state:x, priority: x}} ########## #}
{% elif feature == 'hsrp' %}
- show standby brief:
{% for each_hsrp in input_vars %}
    {{ each_hsrp.id }}:
      priority: {{ each_hsrp.priority }}
      state: {{ each_hsrp.state }}
{% endfor %}
{# ########### SWI_STACK: show switch - {sw_num: {priority: x, role: x, state: x}} ########## #}
{% elif feature == 'switch_stack' %}
- show switch:
{% for each_intf in input_vars %}
    _mode: strict
    {{ each_intf.sw_number }}:
      priority: {{ each_intf.priority }}
      role: {{ each_intf.role }}
      state: {{ each_intf.state }}
{% endfor %}
{# ########### VSS_HA: show  redundancy state | in state - {my_state: ACTIVE, peer_state: STANDBY HOT} ########## #}
{% elif feature == 'vss_state' %}
- show  redundancy state | in state:
    my_state: {{ input_vars.my_state }}
    peer_state: {{ input_vars.peer_state }}
{# ########### INTF_L2: show interfaces status - {intf: {duplex: x, speed: x, status: x, vlan:x }} ########## #}
{% elif feature == 'intf_status' %}
- show interfaces status:
{% for each_intf, each_intf_info in input_vars.items() %}
    {{ each_intf }}:
      duplex: {{ each_intf_info.duplex }}
      speed: {{ each_intf_info.speed }}
      status: {{ each_intf_info.status }}
      vlan: {{ each_intf_info.vlan }}
{% endfor %}
{# ########### INTF_SWI_PORT: show interfaces switchport - {intf: {mode: access or trunk, vlan: x or [x,y]}} ########## #}
{% elif feature == 'intf_swi_port' %}
- show interfaces switchport:
{% for each_intf, each_intf_info in input_vars.items() %}
    {{ each_intf }}:
      mode: {{ each_intf_info.mode }}
{% if each_intf_info.vlan is iterable %}
      vlan: {{ each_intf_info.vlan | join(", ") | replace(" ", "") }}
{% else %}
      vlan: {{ each_intf_info.vlan }}
{% endif %}{% endfor %}
{# ########### VLAN: show vlan brief - {vlan: {name: x, intf:[x,y]}} ########## #}
{% elif feature == 'vlan' %}
- show vlan brief:
{% for each_vl, each_vl_info in input_vars.items() %}
    {{ each_vl }}:
      name: {{ each_vl_info.name }}
      intf:
        _mode: strict
        list: {{ each_vl_info.intf }}
{% endfor %}
{# ########### show spanning-tree - {vlan: intf:[x,y]} ########## #}
{% elif feature == 'stp_vlan' %}
- show spanning-tree:
{% for each_vl in input_vars %}
    {{ each_vl.vlan }}: 
      list: {{ each_vl.intf }}
{% endfor %}
{# ########### show mac address-table count [vlan x] | count dynamic|DYNAMIC - {total_mac: x, vlxxx_total_mac: x} ########## #}
{% elif feature == 'mac_table' %}
{% for mac_info, num_mac in input_vars.items() %}
{% if mac_info == "total_mac" %}
- show mac address-table | count dynamic|DYNAMIC:
    total_mac: {{ input_vars.total_mac }}
{% else %}
{% set vl = mac_info.split('_') | first %}
- show mac address-table vlan {{ vl }} | count dynamic|DYNAMIC:
    {{ mac_info }}: {{ num_mac }}
{% endif %}{% endfor %}
{# ########### show authentication sessions | count [mab or dot1x] - {auth_mab: x or auth_dot1x: x} ########## #}
{% elif feature == 'auth_session' %}
- show authentication sessions | count mab:
    auth_mab: {{ input_vars.total_mab }}
- show authentication sessions | count dot1x:
    auth_dot1x: {{ input_vars.total_dot1x }}
{# ########### show vrf - {vrf: [intfx, intfy]} ########## #}
{% elif feature == 'vrf' %}
- show vrf:
{% for each_vrf, intf in input_vars.items() %}
    {{ each_vrf }}:
      _mode: strict
      list: {{ intf }}
{% endfor %}
{# ########### show ip route [vrf xxx] summary | in Total - {global_subnets: x, xx_subnets: x} ########## #}
{% elif feature == 'route_summary' %}
{% for vrf_info, num_rte in input_vars.items() %}
{% if vrf_info == "global_subnets" %}
- show ip route  summary | in Total:
    {{ vrf_info }}: {{ num_rte }}
{% else %}
{% set vrf = vrf_info.split('_') | first %}
- show ip route vrf {{ vrf }} summary | in Total:
    {{ vrf_info }}: {{ num_rte }}
{% endif %}{% endfor %}
{# ########### show ip  route - {route/prefix: next-hop} ########## #}
{% elif feature == 'route' %}
- show ip  route:
{% for each_rte, each_nh in input_vars.items() %}
{% if each_nh.__class__.__name__ == 'list' %}
    {{ each_rte }}: 
      list: {{ each_nh }}
{% else %}
    {{ each_rte }}: {{ each_nh }}
{% endif %}{% endfor %}
{# ########### show ip  route vrf BLU - {route/prefix: next-hop} ########## #}
{% elif 'route' in feature %}
{% set vrf = feature.split('_') | first %}
- show ip  route vrf {{ vrf }}:
{% for each_rte, each_nh in input_vars.items() %}
{% if each_nh.__class__.__name__ == 'list' %}
    {{ each_rte }}:
      _mode: strict 
      list: {{ each_nh }}
{% else %}
    {{ each_rte }}: {{ each_nh }}
{% endif %}{% endfor %}
{# ########### show ip ospf interface brief - {intf: {area: x, cost: y, state: z}} ########## #}
{% elif feature == 'ospf_intf' %}
- show ip ospf interface brief:
{% for each_intf in input_vars %}
    _mode: strict
    {{ each_intf.intf }}:
      area: {{ each_intf.area }}
      cost: {{ each_intf.cost }}
      state: {{ each_intf.state }}
{% endfor %}
{# ########### show ip ospf neighbor - {nbr_ip: {state: FULL}} ########## #}
{% elif feature == 'ospf_nbr' %}
- show ip ospf neighbor:
    _mode: strict
{% for each_nbr in input_vars.nbrs %}
    {{ each_nbr }}:
      state: FULL
{% endfor %}
{# ########### show ip ospf database database-summary | in Total - {total_lsa: x } ########## #}
{% elif feature == 'ospf_lsdb' %}
- show ip ospf database database-summary | in Total:
    total_lsa: {{ input_vars.total_lsa }}
{# ########### show ip eigrp interfaces - {intf: [x, y]} ########## #}
{% elif feature == 'eigrp_intf' %}
- show ip eigrp interfaces:
    intf:
      _mode: strict
      list: {{ input_vars.intf }}
{# ########### show ip eigrp neighbors - {nbrs: [x, y]} ########## #}
{% elif feature == 'eigrp_nbr' %}
- show ip eigrp neighbors:
    nbrs:
      _mode: strict
      list: {{ input_vars.nbrs }}
{# ########### show bgp all summary - {peer: {asn:x, rcv_pfx:x}} ########## #}
{% elif feature == 'bgp_summary' %}
- show bgp all summary:
    _mode: strict
{% for each_peer, peer_info in input_vars.items() %}
    {{ each_peer }}:
      asn: {{ peer_info.asn }}
      rcv_pfx: {{ peer_info.rcv_pfx }}
{% endfor %}
{# ########### show nve vni - {l3vni: {bdi: x, vrf: z, state: UP}} ########## #}
{% elif feature == 'nve_vni' %}
- show nve vni:
    _mode: strict
{% for each_vni, vni_info in input_vars.items() %}
    {{ each_vni }}:
      bdi: {{ vni_info.bdi }}
      vrf: {{ vni_info.vrf }}
      state: Up
{% endfor %}
{# ########### show nve peers - {ls_vni: {peer: ip, state: Up}} ########## #}
{% elif feature == 'nve_peers' %}
- show nve peers:
    _mode: strict
{% for each_vni, vni_info in input_vars.items() %}
    {{ each_vni }}:
      peer: {{ vni_info.peer }}
      state: UP
{% endfor %}
{# ########### show crypto session brief - {vpn_peer: {intf: x, status: UA}} ########## #}
{% elif feature == 'vpn' %}
- show crypto session brief:
    _mode: strict
{% for each_vpn in input_vars %}
    {{ each_vpn.peer }}:
      intf: {{ each_vpn.intf }}
      status: UA
{% endfor %}

{# ########### END of validations ########## #}
{% endif %}

{# #################################### NXOS ################################### #}
{% elif 'nxos' in os_type |string %}

{# ########### Desired state of ACLs ########## #}
{% if feature == 'acl' %}
{% for each_acl in input_vars %}
- show access-lists {{ each_acl.name }}:
    {{ each_acl.name }}:
      _mode: strict
{% set seq = namespace(cnt=10) %}
{% for each_ace in each_acl.ace %}{% if each_ace.keys() | list | first != 'remark' %}
      '{{ seq.cnt }}':
        action: {{ each_ace.keys() | list | first }}
        protocol: ip
        src: {{ each_ace.values() | list | first }}
        dst: any
{% endif %}
{% set seq.cnt = seq.cnt + 10 %}
{% endfor %}{% endfor %}

{# ########### END of validations ########## #}
{% endif %}


{# #################################### ASA ################################### #}
{% elif 'asa' in os_type |string %}

{% if feature == 'acl' %}
{% macro build_val_acl(each_acl) -%}
{% set seq = namespace(cnt=10) %}
{% for each_ace in each_acl %}{% if each_ace.keys() | list | first != 'remark' %}
      '{{ seq.cnt }}':
        src: {{ each_ace.values() | list | first }}
        intf: mgmt
{% set seq.cnt = seq.cnt + 10 %}
{% endif %}{% endfor %}
{%- endmacro -%}

{% for each_acl in input_vars %}
{% if 'ssh' in each_acl.name |string |lower %}
- show run ssh:
    SSH:
      _mode: strict
{{ build_val_acl(each_acl.ace) }}
- show run http:
    HTTP:
      _mode: strict
{{ build_val_acl(each_acl.ace) }}
{% endif %}{% endfor %}

{# ########### END of validations ########## #}
{% endif %}



{# ############################ END of devices ################################# #}
{% endif %}